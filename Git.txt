
一. 关于Git
    1. 什么是Git: 是一个开源的分布式版本控制系统, 用于高效的管理大小项目和文件.
    
    2. 什么是代码管理工具
        * 防止代码丢失, 做备份
        * 代码的版本管理管控, 通过设置节点在多个版本间切换
        * 建立分支各自开发, 互不影响, 方便合并
        * 多人协同, 方便代码的共享传输

    3. git特点
        * git是开源的, 多在*nix下使用, 可以管理各种文件
        * git是分布式的管理工具(svn是集中式)
        * git每台主机都有完整代码, 数据安全, 分享数度快
        * git拥有更好的分支支持, 方便多人协同工作

    4. Git安装
        $: sudo apt-get install git

二. git使用
    1. 几个概念
        [1] 工作区: 项目所在操作目录, 项目操作的区域
        [2] 暂存区: 用于记录工作区的工作(修改)内容
        [3] 仓库区: 用于将记录的内容备份
        [4] 远程仓库: 远程主机上的GIT仓库

    2. Git的初始化配置
        命令: git config
        [1] 配置系统所有用户
            $: git config --system [选项]
            配置文件位置: /etc/gitconfig
        
        [2] 配置当前用户
            $: git config --global [选项]
            配置文件位置: ~/.gitconfig

        [3] 配置当前项目:
            $: git config [选项]
            配置文件: 项目目录/.git/config
            * 要求必须在项目目录下执行
        
        配置用户名
            e.g. 配置用户名为Strong
            sudo git config --system user.name Strong

        配置用户邮箱
            e.g. 配置用户邮箱
            sudo git config --global user.email 249002897@qq.com
        
        配置编译器
            e.g. 为当前项目配置编译器
            git config core.editor vscode
            查看当前项目配置信息:
            $: git config --list

    3. git基本操作
        [1] 初始化仓库: 
            $: git init
            意义: 将某个项目目录变为git操作目录, 生成本地仓库. 该目录即可以使用git进行管理

        [2] 查看分支状态: 
            $: git status
            说明: 初始默认工作分支为master, 当工作区和仓库不一致时, 会有相应的提示信息
        
        [3] 将工作区内容记录到暂存区: 
            $: git add [files]
            e.g. 将file1 file2 提交
            git add file1 file2

            e.g. 提交当前目录下所有文件
            git add *

        [4] 取消暂存区记录: 
            $: git rm --cached [filename]

        [5] 将文件同步到本地仓库区
            $: git commit -m [message]
            说明: 每次同步都需要添加一定的同步信息, commit操作只能同步暂存区已经记录的内容

        [6] 查看commit日志
            $: git log
            $: git log --pretty=oneline

        [7] 文件比较:
            $: git diff [filename]
            说明: 用于比较工作区文件和仓库文件差异
配置用户名为Strong        
        [8] 放弃工作区修改
            $: git checkout -- [filename]

        [9] 从仓库恢复文件
            $: git checkout [filename]

        [10] 移动或删除文件并提交暂存
            $: git mv [file] [path] 移动文件
            $: git rm [filename]    删除文件
    
    4. 版本控制命令
        [1] 退回到上一个的commit节点
            $: git reset --hard HEAD^
            说明: HEAD是commit指针, 一个^表示后退一个commit

        [2] 去往指定的commit操作节点
            $: git reset --hard [commit_id]

        [3] 查看全部历史操作: 
            $: git reflog
            说明: 利用该操作可以使用reset去往任意历史位置

        [4] 标签创建
            $: git tag [名称] -m [message]
            标签: 在工作的重要位置添加快照, 保存当时的工作状态, 一般用于版本迭代
            注意: 标签的message信息可以不写, 但是最好添加

            将标签添加到指定的commit_id:
                git tag [名称] [commit_id] -m [message]

        [5] 查看标签列表

            git tag 查看标签列表
            git show [tag_name]  查看标签信息表

    5. 临时工作区
        [1] 创建临时保存工作区: 
            $: git stash
            说明: 将工作区未提交的修改封存, 让工作区回到修改前状态
        
        [2] 查看临时工作区列表:
            $: git stash list

        [3] 应用某个保存的工作区:
            $: git stash apply [stash]


88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

一. 分支管理
    1. 什么是分支: 分支即每个人在原有代码的基础上建立自己的工作环境, 单独开发, 不会干扰到其他分支操作, 完成开发后再统一合并到主线中
    2. 多人开发建立分支的优点: 安全, 不影响其他分支, 独立控制进度
    3. 分之操作命令: 
        [1] 查看分支情况: 
            $: git branch
            说明: 前面带 * 的表示当前正在工作分支
        
        [2] 创建新的分支:
            $: git branch [branch_name] 
            注意: 基于某个分支创建新分支的时候原有分支最好是干净的
        
        [3] 切换工作分支:
            $: git checkout [branch]

        [4] 创建并切换分支:
            $: git checkout -b [branch_name]

        [5] 合并分支:
            $: gir merge [branch]
            注意: 
                1. 表示将某个当前分支建立的分支, 合并过来
                2. 合并分支过程中可能产生冲突, 需要手动解决
                3. 在分支操作中尽量添加新的模块, 不要修改原有代码内容
        
        [6] 删除分支:
            $: git branch -d [branch]
            注意: 没有被合并的分支不能使用该命令删除. 如果强制删除使用-D选项

二. 远程仓库:
    1. 什么是远程仓库: 远程主机上的git仓库. 实际上git是分布式结构, 每台主机上git仓库结构相似, 只是把其他主机上的git仓库称为远程仓库.
    2. 共享仓库: git分布式结构衍生了很多工作模式, 共享仓库是其中比较常用的模式之一. 
                普通隐藏.git仓库不能被其他主机获取代码, 共享仓库既可以将git项目共享的仓库
    3. 创建自己的共享库
        [1] 选择共享库目录, 设置目录属主
            $: mkdir gitrepo
            $: chown tarena:tarena gitrepo
        [2] 初始化该目录为git仓库, 设置bare属性
            $: cd gitrepo
            $: git init --bare Strong.git
            注: Strong 为共享项目名称, .git 为习惯后缀
        [3] 将配置git目录设置为和共享仓库目录相同的属主
            $: chown -R tarena:tarena Strong.git

    4. 添加项目到共享仓库
        [1] 创建共享仓库连接
            git remote add origin tarena@127.0.0.1:/home/tarena/gitrepo/Strong.git
            注意: 
                * 该操作要在本地的一个git项目中执行
                * 与远程主机的连接默认使用SSH方法
                * origin是给远程主机起的名字

        [2] 删除远程主机
            $: git remote rm [origin]
            注意: 连接多个远程主机时, 远程主机名是不能重复的

        [3] 将本地分支推送到远程共享仓库
            $: git push -u origin master
            注意:
            * -u 表示建立分支自动关联, 一般首次向远程推送某个分支时使用
            * $: git branch -a 可以查看连接的远程分支
            * $: git push origin : [branch] 可以删除远程分支

        [4] 获取远程仓库项目
            $: git clone tarena@172.40.91.185:/home/tarena/gitrepo/tedu.git
            注意: 通过clone获取的远程项目到本地直接就是一个git本地仓库, 并且与远程建立好了连接

        [5] 从远程获取最新代码:
            $: git pull
            注意: clone后本地项目与远程已经建立关联, pull可以直接拉取代码到对应分支

        [6] 从远程获取最新内容到本地:
            $: git fetch
            注意: 
                * pull是直接将远程分支内容拉取到本地, 并和当前工作分支进行合并; fetch 是将远程分支内容拉取到本地显示的对应远程分支中, 如果想和当前分支合并需要在进行merge操作
                * git fetch origin master:tmp 可以将远程分支内容拉取到本地的新建分支tmp中

        [7] 推送其他内容
            推送标签:
                $: git push origin [tag]
            推送版本落后于远程版本时
                $: git push --force origin

三. GitHub使用
    1. 介绍: github是一个开源项目社区网站. 拥有全球最多的开源项目. 开发者可以注册网站在github上建立自己的项目仓库
    2. 网址: github.com
       代码管理工具: git
    3. 获取开源项目: 
        [1] 通过左上角search查找想要的项目
        [2] 根据查找结果选择某个项目进入项目界面
        [3] 左上角复制地址git clone, 或者直接download